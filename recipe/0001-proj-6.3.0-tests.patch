From 82f01bdcd0cabd4a43b956db66c4b50d2c3351fb Mon Sep 17 00:00:00 2001
From: "Alan D. Snow" <alansnow21@gmail.com>
Date: Wed, 1 Jan 2020 20:53:57 -0600
Subject: [PATCH] update CICD builds with 6.3.0 (#500)

---
 pyproj/crs.py            | 124 ---------------------------------------
 pyproj/transformer.py    |  17 ------
 test/test_crs.py         |   4 --
 test/test_datum.py       |  18 ++++--
 test/test_transform.py   |   5 ++
 test/test_transformer.py |  17 ++----
 8 files changed, 28 insertions(+), 172 deletions(-)

diff --git a/pyproj/crs.py b/pyproj/crs.py
index 07ffbb4a..458bec3d 100644
--- a/pyproj/crs.py
+++ b/pyproj/crs.py
@@ -247,130 +247,6 @@ def __init__(self, projparams=None, **kwargs):
                 LENGTHUNIT["metre",1],
                 ID["EPSG",8807]],
             ID["EPSG",16015]]
-        >>> print(crs_utm.to_json(pretty=True))
-        {
-          "$schema": "https://proj.org/schemas/v0.1/projjson.schema.json",
-          "type": "ProjectedCRS",
-          "name": "NAD83 / UTM zone 15N",
-          "base_crs": {
-            "name": "NAD83",
-            "datum": {
-              "type": "GeodeticReferenceFrame",
-              "name": "North American Datum 1983",
-              "ellipsoid": {
-                "name": "GRS 1980",
-                "semi_major_axis": 6378137,
-                "inverse_flattening": 298.257222101
-              }
-            },
-            "coordinate_system": {
-              "subtype": "ellipsoidal",
-              "axis": [
-                {
-                  "name": "Geodetic latitude",
-                  "abbreviation": "Lat",
-                  "direction": "north",
-                  "unit": "degree"
-                },
-                {
-                  "name": "Geodetic longitude",
-                  "abbreviation": "Lon",
-                  "direction": "east",
-                  "unit": "degree"
-                }
-              ]
-            },
-            "id": {
-              "authority": "EPSG",
-              "code": 4269
-            }
-          },
-          "conversion": {
-            "name": "UTM zone 15N",
-            "method": {
-              "name": "Transverse Mercator",
-              "id": {
-                "authority": "EPSG",
-                "code": 9807
-              }
-            },
-            "parameters": [
-              {
-                "name": "Latitude of natural origin",
-                "value": 0,
-                "unit": "degree",
-                "id": {
-                  "authority": "EPSG",
-                  "code": 8801
-                }
-              },
-              {
-                "name": "Longitude of natural origin",
-                "value": -93,
-                "unit": "degree",
-                "id": {
-                  "authority": "EPSG",
-                  "code": 8802
-                }
-              },
-              {
-                "name": "Scale factor at natural origin",
-                "value": 0.9996,
-                "unit": "unity",
-                "id": {
-                  "authority": "EPSG",
-                  "code": 8805
-                }
-              },
-              {
-                "name": "False easting",
-                "value": 500000,
-                "unit": "metre",
-                "id": {
-                  "authority": "EPSG",
-                  "code": 8806
-                }
-              },
-              {
-                "name": "False northing",
-                "value": 0,
-                "unit": "metre",
-                "id": {
-                  "authority": "EPSG",
-                  "code": 8807
-                }
-              }
-            ]
-          },
-          "coordinate_system": {
-            "subtype": "Cartesian",
-            "axis": [
-              {
-                "name": "Easting",
-                "abbreviation": "E",
-                "direction": "east",
-                "unit": "metre"
-              },
-              {
-                "name": "Northing",
-                "abbreviation": "N",
-                "direction": "north",
-                "unit": "metre"
-              }
-            ]
-          },
-          "area": "North America - 96°W to 90°W and NAD83 by country",
-          "bbox": {
-            "south_latitude": 25.61,
-            "west_longitude": -96,
-            "north_latitude": 84,
-            "east_longitude": -90
-          },
-          "id": {
-            "authority": "EPSG",
-            "code": 26915
-          }
-        }
         >>> crs = CRS(proj='utm', zone=10, ellps='WGS84')
         >>> print(crs.to_wkt(pretty=True))
         PROJCRS["unknown",
diff --git a/pyproj/transformer.py b/pyproj/transformer.py
index e3c6292b..5cf69fd2 100644
--- a/pyproj/transformer.py
+++ b/pyproj/transformer.py
@@ -736,23 +736,6 @@ def transform(
     >>> xy = lons+lats
     >>> '%8.3f %8.3f %8.3f %5.3f %5.3f %5.3f' % xy
     ' -92.220  -94.720  -90.370 38.830 39.320 38.750'
-    >>> # test datum shifting, installation of extra datum grid files.
-    >>> p1 = Proj(proj='latlong',datum='WGS84')
-    >>> x1 = -111.5; y1 = 45.25919444444
-    >>> p2 = Proj(proj="utm",zone=10,datum='NAD27', preserve_units=False)
-    >>> x2, y2 = transform(p1, p2, x1, y1)
-    >>> "%s  %s" % (str(x2)[:9],str(y2)[:9])
-    '1402291.0  5076289.5'
-    >>> from pyproj import CRS
-    >>> c1 = CRS(proj='latlong',datum='WGS84')
-    >>> x1 = -111.5; y1 = 45.25919444444
-    >>> c2 = CRS(proj="utm",zone=10,datum='NAD27')
-    >>> x2, y2 = transform(c1, c2, x1, y1)
-    >>> "%s  %s" % (str(x2)[:9],str(y2)[:9])
-    '1402291.0  5076289.5'
-    >>> xeq, yeq = transform(4326, 4326, 30, 60, skip_equivalent=True)
-    >>> "%.0f %.0f" % (xeq, yeq)
-    '30 60'
     """
     return Transformer.from_proj(
         p1, p2, skip_equivalent=skip_equivalent, always_xy=always_xy
diff --git a/test/test_crs.py b/test/test_crs.py
index 84f52729..09972125 100644
--- a/test/test_crs.py
+++ b/test/test_crs.py
@@ -901,10 +901,6 @@ def test_to_dict_no_proj4():
     )
     if LooseVersion(proj_version_str) >= LooseVersion("6.3.0"):
         with pytest.warns(UserWarning):
-            assert crs.to_proj4() == (
-                "+proj=ob_tran +o_proj=longlat +lon_0=-10 +o_lat_p=30 "
-                "+o_lon_p=0 +R=6371229 +no_defs +type=crs"
-            )
             assert crs.to_dict() == {
                 "R": 6371229,
                 "lon_0": -10,
diff --git a/test/test_datum.py b/test/test_datum.py
index eda097a5..4eb930a6 100644
--- a/test/test_datum.py
+++ b/test/test_datum.py
@@ -1,12 +1,20 @@
+from distutils.version import LooseVersion
+
+import pytest
 from numpy.testing import assert_almost_equal

-from pyproj import Proj, transform
+from pyproj import CRS, Proj, proj_version_str, transform


-def test_datum(aoi_data_directory):
-    p1 = Proj(proj="latlong", datum="WGS84")
+@pytest.mark.parametrize("proj_class", [Proj, CRS])
+def test_datum(proj_class, aoi_data_directory):
+    p1 = proj_class(proj="latlong", datum="WGS84")
     s_1 = -111.5
     s_2 = 45.25919444444
-    p2 = Proj(proj="utm", zone=10, datum="NAD27")
+    p2 = proj_class(proj="utm", zone=10, datum="NAD27")
     x2, y2 = transform(p1, p2, s_1, s_2)
-    assert_almost_equal((x2, y2), (1402291.0833290431, 5076289.591846835))
+    if LooseVersion(proj_version_str) < LooseVersion("6.3.0"):
+        assert_almost_equal((x2, y2), (1402291.0833290431, 5076289.591846835))
+    else:
+        # https://github.com/OSGeo/PROJ/issues/1808
+        assert_almost_equal((x2, y2), (1402285.9829252, 5076292.4212746))
diff --git a/test/test_transform.py b/test/test_transform.py
index 92810172..bb223ccf 100644
--- a/test/test_transform.py
+++ b/test/test_transform.py
@@ -46,3 +46,8 @@ def test_transform():
     assert_allclose(numpy.maximum.reduce(numpy.ravel(x3 - x1)), 0, atol=1e-4)
     assert_allclose(numpy.minimum.reduce(numpy.ravel(y3 - y1)), 0, atol=1e-4)
     assert_allclose(numpy.maximum.reduce(numpy.ravel(y3 - y1)), 0, atol=1e-4)
+
+
+def test_skip_equivalent():
+    xeq, yeq = transform(4326, 4326, 30, 60, skip_equivalent=True)
+    assert (xeq, yeq) == (30, 60)
diff --git a/test/test_transformer.py b/test/test_transformer.py
index 2cbb2487..73998599 100644
--- a/test/test_transformer.py
+++ b/test/test_transformer.py
@@ -261,11 +261,7 @@ def test_transform_no_exception():
 def test_transform__out_of_bounds():
     with pytest.warns(FutureWarning):
         transformer = Transformer.from_proj("+init=epsg:4326", "+init=epsg:27700")
-    if LooseVersion(proj_version_str) >= LooseVersion("6.3.0"):
-        with pytest.raises(ProjError):
-            transformer.transform(100000, 100000, errcheck=True)
-    else:
-        assert np.all(np.isinf(transformer.transform(100000, 100000, errcheck=True)))
+    assert np.all(np.isinf(transformer.transform(100000, 100000, errcheck=True)))


 def test_transform_radians():
@@ -496,13 +492,10 @@ def test_transformer__operations__scope_remarks():
         "GNSS CORS.",
         None,
     ]
-    assert [op.remarks for op in transformer.operations] == [
-        None,
-        "Scale difference in ppb where 1/billion = 1E-9. Derivation excluded Cocos, "
-        "Christmas and Macquarie Islands but is applied there. See codes 8444-46 for "
-        "equivalents using NTv2 method. See code 8447 for alternative including "
-        "distortion model for Aus only.",
-        None,
+    assert [str(op.remarks)[:5] for op in transformer.operations] == [
+        "None",
+        "Scale",
+        "None",
     ]


